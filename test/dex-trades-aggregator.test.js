const {Asset, xdr} = require('@stellar/stellar-sdk')
const {DexTradesAggregator} = require('../src/dex-trades-aggregator')

describe('DexTradesAggregator', () => {
    const issuer = 'GB37DH4CM64RFUJ4LVNGTECDITMYELOBFUW7CR36644JZMFYZA3UBHQW'
    const baseAsset = new Asset('X', issuer)
    const trackedAssets = [
        //two assets involved in trades
        new Asset('B', issuer),
        null, //not supported asset
        new Asset('Y', issuer), //no trades
        new Asset('C', issuer),
        undefined, //not supported asset
        new Asset('W', issuer)  //no trades
    ]
    const resPrices = [
        {
            quoteVolume: 5319168566n,
            volume: 10670398723n
        },
        {
            quoteVolume: 0n,
            volume: 0n
        },
        {
            quoteVolume: 0n,
            volume: 0n
        },
        {
            quoteVolume: 2016928760n,
            volume: 6032655521n
        },
        {
            quoteVolume: 0n,
            volume: 0n
        },
        {
            quoteVolume: 0n,
            volume: 0n
        }
    ]

    test('Aggregate transactions', () => {
        const aggregator = new DexTradesAggregator(baseAsset, trackedAssets)
        //tx fbcc50318a87735e205a5c669a62a7ecbf53eaf200860b089e633f3d5594d9e6
        aggregator.processTx(txFromXdr('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'))
        //tx 904986e7160d7090f36d563f0503b440550637627f48fabd11eb9d9ac5bc408d
        aggregator.processTx(txFromXdr('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'))
        const aggResult = aggregator.aggregatePrices(trackedAssets.length)
        expect(aggResult).toStrictEqual(resPrices)
    })
})

function txFromXdr(resultXdr) {
    return {
        resultXdr: xdr.TransactionResultPair.fromXDR(Buffer.from(resultXdr, 'base64')).result(),
        hash: ''
    }
}